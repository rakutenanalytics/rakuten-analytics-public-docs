"use strict";(self.webpackChunkanalytics_sdk_extensions=self.webpackChunkanalytics_sdk_extensions||[]).push([[1076],{9593:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>l,contentTitle:()=>i,default:()=>o,frontMatter:()=>s,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"sdks/analytics-sdks/android/advanced-usage/android-analytics-app-to-app","title":"App to App Tracking","description":"App to App Tracking","source":"@site/docs/sdks/analytics-sdks/android/advanced-usage/app-to-app.md","sourceDirName":"sdks/analytics-sdks/android/advanced-usage","slug":"/analytics-sdk/android/android-app-to-app","permalink":"/rakuten-analytics-public-docs/docs/analytics-sdk/android/android-app-to-app","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10,"id":"android-analytics-app-to-app","slug":"/analytics-sdk/android/android-app-to-app","title":"App to App Tracking","added_version":"7.3.0","updated_version":"11.1.0","changelog":"./android-changelog"},"sidebar":"docSidebar","previous":{"title":"Identity Container","permalink":"/rakuten-analytics-public-docs/docs/analytics-sdk/android/identity-container"},"next":{"title":"App to WebView Tracking","permalink":"/rakuten-analytics-public-docs/docs/analytics-sdk/android/android-app-to-web"}}');var t=r(4848),p=r(8453);const s={sidebar_position:10,id:"android-analytics-app-to-app",slug:"/analytics-sdk/android/android-app-to-app",title:"App to App Tracking",added_version:"7.3.0",updated_version:"11.1.0",changelog:"./android-changelog"},i=void 0,l={},c=[{value:"App to App Tracking",id:"app-to-app-tracking",level:2},{value:"Referred Apps",id:"referred-apps",level:3},{value:"Referral App",id:"referral-app",level:3},{value:"Parameters for <code>ReferralAppModel</code> class",id:"parameters-for-referralappmodel-class",level:4},{value:"Parameters for <code>ReferralAppModel.getReferralUri()</code> method",id:"parameters-for-referralappmodelgetreferraluri-method",level:4},{value:"Enable/Disable App-to-App referral tracking",id:"enabledisable-app-to-app-referral-tracking",level:3}];function d(e){const a={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,p.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.h2,{id:"app-to-app-tracking",children:"App to App Tracking"}),"\n",(0,t.jsx)(a.p,{children:'App to App Tracking feature allows app to track details included in the deeplink URI from the "referral" apps to the "referred" apps.'}),"\n",(0,t.jsx)(a.p,{children:"If Analytics SDK v7.3.0 or later is integrated in the referred app, the SDK automatically sends two events to RAT:"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:["an etype ",(0,t.jsx)(a.code,{children:"pv"})," visit event sent to the ",(0,t.jsx)(a.strong,{children:"referred"})," app\u2019s RAT account"]}),"\n",(0,t.jsxs)(a.li,{children:["an etype ",(0,t.jsx)(a.code,{children:"deeplink"})," event sent to the ",(0,t.jsx)(a.strong,{children:"referral"})," app\u2019s RAT account"]}),"\n"]}),"\n",(0,t.jsx)(a.h3,{id:"referred-apps",children:"Referred Apps"}),"\n",(0,t.jsx)(a.p,{children:"If the referred app is already running in background when it is opened by the referral app via deeplink or app link, the SDK will not be able to retrieve the referral parameters."}),"\n",(0,t.jsx)(a.p,{children:"To handle this, the app needs to add the following:"}),"\n",(0,t.jsxs)(a.ol,{children:["\n",(0,t.jsxs)(a.li,{children:["Override ",(0,t.jsx)(a.code,{children:"onNewIntent"})," on the activity that will handle the deeplink, and set the new intent to the activity's intent"]}),"\n"]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-kotlin",children:"class YourActivity : Activity() {\n...\n    override fun onNewIntent(intent: Intent?) {\n        super.onNewIntent(intent)\n        this.intent = intent\n    }\n...\n}\n"})}),"\n",(0,t.jsx)(a.h3,{id:"referral-app",children:"Referral App"}),"\n",(0,t.jsx)(a.p,{children:"Please use the following format for the deeplink URL, and make sure that query parameter values are encoded correctly."}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-kotlin",children:'    private fun createDeeplinkUriString(): String {\n        val scheme = "samplescheme" // referred app\'s deeplink scheme\n        val host = "samplehost" // referred app\'s deeplink host\n        val packageName = "referral.app.package.name" // referral app\'s package name\n\n        val builder = StringBuilder()\n        builder.append("$scheme://$host?ref=$packageName")\n\n        val acc = "123" // referral app\'s RAT account ID\n        builder.append("&ref_acc=${URLEncoder.encode(acc, StandardCharsets.UTF_8.displayName())}")\n\n        val aid = "456" // referral app\'s RAT application ID\n        builder.append("&ref_aid=${URLEncoder.encode(aid, StandardCharsets.UTF_8.displayName())}")\n\n        // the following values are optional parameters\n        val link = "campaign-abc" // unique identifier of the referral trigger\n        builder.append("&ref_link=${URLEncoder.encode(link, StandardCharsets.UTF_8.displayName())}")\n\n        val comp = "checkout" // component in the referral app\n        builder.append("&ref_comp=${URLEncoder.encode(comp, StandardCharsets.UTF_8.displayName())}")\n\n        // below are the custom parameters that can use any String as parameter key\n        // there is currently no limit on the number of custom parameters\n        val param1 = "param1" // custom parameter with "custom1" key and "param1" value\n        builder.append("&custom1=${URLEncoder.encode(param1, StandardCharsets.UTF_8.displayName())}")\n\n        val param2 = "param2" // custom parameter with "custom2" key and "param2" value\n        builder.append("&custom2=${URLEncoder.encode(param2, StandardCharsets.UTF_8.displayName())}")\n\n        return builder.toString()\n    }\n'})}),"\n",(0,t.jsx)(a.p,{children:"To launch referred app, use the created deeplink URI to launch the intent."}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-kotlin",children:"    private fun onLaunchApp() {\n        try {\n            val intent = Intent(Intent.ACTION_VIEW, Uri.parse(createDeeplinkUriString()))\n            startActivity(intent)\n        } catch (e: ActivityNotFoundException) {\n            Log.e(TAG, e.localizedMessage, e.cause)\n        }\n    }\n"})}),"\n",(0,t.jsx)(a.p,{children:"Starting v8.1.0, a helper class is available to easily generate URI with correct format."}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-kotlin",children:'   val scheme = "samplescheme" // referred app\'s deeplink scheme, can be set to "http" or "https" for App Link\n   val host = "samplehost" // referred app\'s deeplink host\n   val packageName = "referral.app.package.name" // referral app\'s package name\n   val acc = 123 // referral app\'s RAT account ID\n   val aid = 456 // referral app\'s RAT application ID\n\n   val uri = ReferralAppModel(packageName, acc, aid).getReferralUri(scheme, host)\n   // uri will result to "samplescheme://samplehost?ref=referral.app.package.name&ref_acc=123&ref_aid=456"\n\n   // with optional parameters\n   val link = "campaignabc" // unique identifier of the referral trigger\n   val comp = "checkout" // component in the referral app\n   val customParam = mapOf<String, Any>("custom1" to "param1", "custom2" to "param2")\n\n   val uriOptional = ReferralAppModel(packageName, acc, aid, link, comp, customParam).getReferralUri(scheme, host)\n  // uri will result to "samplescheme://samplehost?ref=referral.app.package.name&ref_acc=123&ref_aid=456&ref_link=campaignabc&ref_comp=checkout&custom1=param1&custom2=param2"\n'})}),"\n",(0,t.jsxs)(a.p,{children:[(0,t.jsx)(a.strong,{children:"Notes:"})," The the generated URI ensures that all characters in the keys and values are encoded according to ",(0,t.jsx)(a.a,{href:"https://datatracker.ietf.org/doc/html/rfc3986",children:(0,t.jsx)(a.code,{children:"RFC 3986"})}),", which is essential for creating valid URL query strings."]}),"\n",(0,t.jsxs)(a.h4,{id:"parameters-for-referralappmodel-class",children:["Parameters for ",(0,t.jsx)(a.code,{children:"ReferralAppModel"})," class"]}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.code,{children:"packageName"})," - A required property representing the referral app's package name"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.code,{children:"acc"})," - A required property representing the referral app's account identifier"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.code,{children:"aid"})," - A required property representing the referral app's application identifier"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.code,{children:"link"})," - A optional property representing the unique identifier of the referral trigger"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.code,{children:"comp"})," - A optional property representing the component of the referral app"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.code,{children:"customParams"})," - A optional property representing custom key-value parameters"]}),"\n"]}),"\n",(0,t.jsxs)(a.h4,{id:"parameters-for-referralappmodelgetreferraluri-method",children:["Parameters for ",(0,t.jsx)(a.code,{children:"ReferralAppModel.getReferralUri()"})," method"]}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.code,{children:"scheme"}),' - A required property representing the referred app\'s scheme for the URI (ex. "https", "appscheme", etc.).']}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.code,{children:"host"}),' - A required property representing the referred app\'s host for the URI (ex. "rakuten.co.jp", "apphost", etc). An optional path component can be appended to the ',(0,t.jsx)(a.code,{children:"host"}),' parameter which can be used by the referred app to determine the component to launch (ex. "rakuten.co.jp/home", "appscheme/settings", etc.).']}),"\n"]}),"\n",(0,t.jsxs)(a.p,{children:["Starting v11.1.0, ",(0,t.jsx)(a.code,{children:"ref"})," URL query parameter, which uses the ",(0,t.jsx)(a.code,{children:"packageName"})," parameter value when generating referral URI, will now default to the application's package name if ",(0,t.jsx)(a.code,{children:"packageName"})," parameter in ",(0,t.jsx)(a.code,{children:"ReferralAppModel"})," is set to empty string."]}),"\n",(0,t.jsxs)(a.p,{children:["Example 1: pass actual app's package name for ",(0,t.jsx)(a.code,{children:"packageName"})," parameter"]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-kotlin",children:'   val scheme = "samplescheme" // referred app\'s deeplink scheme, can be set to "http" or "https" for App Link\n   val host = "samplehost" // referred app\'s deeplink host\n   val packageName = "referral.app.package.name" // referral app\'s package name\n   val acc = 123 // referral app\'s RAT account ID\n   val aid = 456 // referral app\'s RAT application ID\n\n   val uri = ReferralAppModel(packageName, acc, aid).getReferralUri(scheme, host)\n   // uri will result to "samplescheme://samplehost?ref=referral.app.package.name&ref_acc=123&ref_aid=456"\n'})}),"\n",(0,t.jsxs)(a.p,{children:["Example 2: pass any value for ",(0,t.jsx)(a.code,{children:"packageName"})," parameter"]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-kotlin",children:'  val scheme = "samplescheme" // referred app\'s deeplink scheme, can be set to "http" or "https" for App Link\n  val host = "samplehost" // referred app\'s deeplink host\n  val packageName = "anyValue" // any value\n  val acc = 123 // referral app\'s RAT account ID\n  val aid = 456 // referral app\'s RAT application ID\n\n  val uri = ReferralAppModel(packageName, acc, aid).getReferralUri(scheme, host)\n  // uri will result to "samplescheme://samplehost?ref=anyValue&ref_acc=123&ref_aid=456"\n  // "anyValue" is used as ref parameter value\n'})}),"\n",(0,t.jsxs)(a.p,{children:["Example 3: pass empty string for ",(0,t.jsx)(a.code,{children:"packageName"})," parameter"]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-kotlin",children:'  // when packageName is set to empty string\n  val scheme = "samplescheme" // referred app\'s deeplink scheme, can be set to "http" or "https" for App Link\n  val host = "samplehost" // referred app\'s deeplink host\n  val packageName = "" // empty string\n  val acc = 123 // referral app\'s RAT account ID\n  val aid = 456 // referral app\'s RAT application ID\n\n  val uri = ReferralAppModel(packageName, acc, aid).getReferralUri(scheme, host)\n  // uri will result to "samplescheme://samplehost?ref=referral.app.package.name&ref_acc=123&ref_aid=456"\n  // application\'s package name is used as ref parameter value\n'})}),"\n",(0,t.jsx)(a.h3,{id:"enabledisable-app-to-app-referral-tracking",children:"Enable/Disable App-to-App referral tracking"}),"\n",(0,t.jsxs)(a.p,{children:["By default the SDK automatically tracks the app-to-app referral tracking, ",(0,t.jsx)(a.code,{children:"pv"})," and ",(0,t.jsx)(a.code,{children:"deeplink"})," events are tracked. The automatic tracking can be disabled by adding ",(0,t.jsx)(a.code,{children:"_rem_applink"})," to disabled events list. More details can be found in ",(0,t.jsx)(a.a,{href:"./android-auto-tracking",children:"Automatic Event Tracking Configuration"})," section."]})]})}function o(e={}){const{wrapper:a}={...(0,p.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,a,r)=>{r.d(a,{R:()=>s,x:()=>i});var n=r(6540);const t={},p=n.createContext(t);function s(e){const a=n.useContext(p);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),n.createElement(p.Provider,{value:a},e.children)}}}]);