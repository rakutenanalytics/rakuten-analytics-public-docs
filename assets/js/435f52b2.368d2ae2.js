"use strict";(self.webpackChunkanalytics_sdk_extensions=self.webpackChunkanalytics_sdk_extensions||[]).push([[444],{891:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>l,default:()=>c,frontMatter:()=>g,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"sdks/analytics-sdks/ios/advanced-usage/ios-analytics-debug-logging","title":"Debug Logging","description":"Configure debug logging","source":"@site/docs/sdks/analytics-sdks/ios/advanced-usage/debug-logging.md","sourceDirName":"sdks/analytics-sdks/ios/advanced-usage","slug":"/analytics-sdk/ios/ios-debug-logging","permalink":"/rakuten-analytics-public-docs/docs/analytics-sdk/ios/ios-debug-logging","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7,"id":"ios-analytics-debug-logging","slug":"/analytics-sdk/ios/ios-debug-logging","title":"Debug Logging","added_version":"5.3.0","updated_version":"9.4.0","changelog":"./ios-changelog"},"sidebar":"docSidebar","previous":{"title":"Error Handling","permalink":"/rakuten-analytics-public-docs/docs/analytics-sdk/ios/ios-error-handling"},"next":{"title":"App to WebView Tracking","permalink":"/rakuten-analytics-public-docs/docs/analytics-sdk/ios/ios-app-to-web"}}');var o=s(4848),a=s(8453);const g={sidebar_position:7,id:"ios-analytics-debug-logging",slug:"/analytics-sdk/ios/ios-debug-logging",title:"Debug Logging",added_version:"5.3.0",updated_version:"9.4.0",changelog:"./ios-changelog"},l=void 0,t={},d=[{value:"Configure debug logging",id:"configure-debug-logging",level:2}];function r(e){const n={code:"code",em:"em",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"configure-debug-logging",children:"Configure debug logging"}),"\n",(0,o.jsxs)(n.p,{children:["To configure the module's internal debug logging use ",(0,o.jsx)(n.code,{children:"AnalyticsManager#set(loggingLevel:)"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"To set logging to debug level (and above i.e. also print info/warning/error logs) use the following function call:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-swift",children:"AnalyticsManager.shared().set(loggingLevel: .debug)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["\u26a0\ufe0f For user privacy and app security the module will ",(0,o.jsx)(n.em,{children:"not"})," print ",(0,o.jsx)(n.strong,{children:"verbose"})," or ",(0,o.jsx)(n.strong,{children:"debug"})," logs in a release build."]}),"\n",(0,o.jsx)(n.p,{children:"By default the module will show error logs, even in a release build. To disable the module's logs completely call:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-swift",children:"AnalyticsManager.shared().set(loggingLevel: .none)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["\u26a0\ufe0f The plist flag ",(0,o.jsx)(n.code,{children:"RMSDKEnableDebugLogging"})," has been deprecated and has no effect now. You must use the above ",(0,o.jsx)(n.code,{children:"AnalyticsManager"})," API function to configure logging levels."]})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(r,{...e})}):r(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>g,x:()=>l});var i=s(6540);const o={},a=i.createContext(o);function g(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:g(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);