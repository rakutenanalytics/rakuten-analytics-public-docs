"use strict";(self.webpackChunkanalytics_sdk_extensions=self.webpackChunkanalytics_sdk_extensions||[]).push([[3549],{9985:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>y,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"sdks/analytics-sdks/android/advanced-usage/android-analytics-identity-container","title":"Identity Container","description":"Secure storage for user\'s sensitive data","source":"@site/docs/sdks/analytics-sdks/android/advanced-usage/identity-store.md","sourceDirName":"sdks/analytics-sdks/android/advanced-usage","slug":"/analytics-sdk/android/identity-container","permalink":"/rakuten-analytics-public-docs/docs/analytics-sdk/android/identity-container","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":9.1,"frontMatter":{"sidebar_position":9.1,"id":"android-analytics-identity-container","slug":"/analytics-sdk/android/identity-container","title":"Identity Container","added_version":"12.0.0","changelog":"./android-changelog"},"sidebar":"docSidebar","previous":{"title":"Setting and Removing Member Identifier","permalink":"/rakuten-analytics-public-docs/docs/analytics-sdk/android/android-member-identifier"},"next":{"title":"App to App Tracking","permalink":"/rakuten-analytics-public-docs/docs/analytics-sdk/android/android-app-to-app"}}');var r=n(4848),s=n(8453);const a={sidebar_position:9.1,id:"android-analytics-identity-container",slug:"/analytics-sdk/android/identity-container",title:"Identity Container",added_version:"12.0.0",changelog:"./android-changelog"},d=void 0,o={},l=[{value:"Secure storage for user&#39;s sensitive data",id:"secure-storage-for-users-sensitive-data",level:2},{value:"Usage",id:"usage",level:2},{value:"Default Encrypted Identity Store",id:"default-encrypted-identity-store",level:3},{value:"Set Up the IdentityStore",id:"set-up-the-identitystore",level:4},{value:"Integrate it with Analytics SDK",id:"integrate-it-with-analytics-sdk",level:4},{value:"Custom Identity Store",id:"custom-identity-store",level:3},{value:"Integrate it with Analytics SDK",id:"integrate-it-with-analytics-sdk-1",level:4},{value:"Self clearing the Identity Store directory",id:"self-clearing-the-identity-store-directory",level:4},{value:"Saving and Retrieving Identities",id:"saving-and-retrieving-identities",level:2},{value:"Removing usage of the Identity Store in Analytics SDK",id:"removing-usage-of-the-identity-store-in-analytics-sdk",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"secure-storage-for-users-sensitive-data",children:"Secure storage for user's sensitive data"}),"\n",(0,r.jsx)(t.p,{children:"Analytics SDK provides an Identity Container to manage user identities and sensitive data. It is a key-value store that holds user identities as pairs of keys and values."}),"\n",(0,r.jsxs)(t.p,{children:["The primary purpose of the Identity Store within this container is to provide a secure and persistent storage mechanism for the member identifier when using ",(0,r.jsxs)(t.a,{href:"/rakuten-analytics-public-docs/docs/analytics-sdk/android/android-member-identifier",children:[(0,r.jsx)(t.code,{children:"setMemberIdentifier()"})," API"]}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(t.p,{children:"The Identity Store, which manages user identities, can be configured in two ways:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Default Encrypted Identity Store"}),": Uses the pre-built, secure Identity Store provided by the Analytics SDK."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Custom Identity Store"}),": Create your own Identity Store with a security implementation tailored to your specific container requirements."]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"default-encrypted-identity-store",children:"Default Encrypted Identity Store"}),"\n",(0,r.jsx)(t.p,{children:"The default Identity store is an encrypted store that uses encryption to store the user identities.  To use the default Identity Store, follow these steps:"}),"\n",(0,r.jsx)(t.h4,{id:"set-up-the-identitystore",children:"Set Up the IdentityStore"}),"\n",(0,r.jsx)(t.p,{children:"First, define a directory where the encrypted identity data will be stored. For example:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-kotlin",children:'val storageDir = File(context.filesDir, "identity")\n'})}),"\n",(0,r.jsx)(t.p,{children:'Next, define the encryption key used to protect the identity data. Important: Replace "your-encryption-key" with a strong, securely managed key.'}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-kotlin",children:'val encryptionKey = "your-encryption-key".toByteArray()\n'})}),"\n",(0,r.jsx)(t.p,{children:"Finally, create the IdentityStore instance using the Builder, specifying the storage directory and encryption key:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-kotlin",children:"val encryptedStore = IdentityStore.Builder()\n    .setEncryptedIdentityStore(storageDir, encryptionKey)\n    .build()\n"})}),"\n",(0,r.jsx)(t.h4,{id:"integrate-it-with-analytics-sdk",children:"Integrate it with Analytics SDK"}),"\n",(0,r.jsxs)(t.p,{children:["Use the ",(0,r.jsx)(t.code,{children:"setIdentityStore"})," method to set the IdentityStore in analytics SDK."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-kotlin",children:"encryptedStore?.let {\n    AnalyticsManager.setIdentityStorage(it)\n}\n"})}),"\n",(0,r.jsx)(t.h3,{id:"custom-identity-store",children:"Custom Identity Store"}),"\n",(0,r.jsx)(t.p,{children:"To create your own Identity Store, implement the IdentityStore interface and update the necessary methods to save, retrieve, and remove user identities."}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsx)(t.p,{children:"The following example demonstrates a basic custom Identity Store that uses a mutable map for storage.  This is for illustrative purposes only. In a real-world scenario, you would likely use a more persistent and secure storage mechanism such as a database, or a secure key-value store, potentially incorporating your preferred encryption method. The custom implementation allows you to tailor the storage and security of user identities to your specific application requirements."})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-kotlin",children:"class CustomIdentityStore : IdentityStore {\n    private val store = mutableMapOf<String, String>()\n\n    override suspend fun save(key: String, value: String) {\n        store[key] = value\n    }\n\n    override suspend fun get(key: String): String? {\n        return store[key]\n    }\n\n    override suspend fun remove(key: String) {\n        store.remove(key)\n    }\n}\n"})}),"\n",(0,r.jsx)(t.h4,{id:"integrate-it-with-analytics-sdk-1",children:"Integrate it with Analytics SDK"}),"\n",(0,r.jsxs)(t.p,{children:["Use the ",(0,r.jsx)(t.code,{children:"setIdentityStore()"})," method to set the IdentityStore in analytics SDK."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-kotlin",children:"val customIdentityStore = CustomIdentityStore()\nAnalyticsManager.setIdentityStorage(customIdentityStore)\n"})}),"\n",(0,r.jsx)(t.h4,{id:"self-clearing-the-identity-store-directory",children:"Self clearing the Identity Store directory"}),"\n",(0,r.jsx)(t.admonition,{type:"warning",children:(0,r.jsxs)(t.p,{children:["Clearing the Identity Store directory will permanently erase the stored data, effectively deleting the Identity Store. Consequently, ",(0,r.jsx)(t.strong,{children:"tracked events will no longer include the member identifier in their payload until a new login action is performed"}),", re-establishing the user's identity."]})}),"\n",(0,r.jsx)(t.h2,{id:"saving-and-retrieving-identities",children:"Saving and Retrieving Identities"}),"\n",(0,r.jsxs)(t.p,{children:["Although the primary function of the Identity container is to manage the storage of the member identifier when using the ",(0,r.jsx)(t.code,{children:"setMemberIdentifier()"})," API , the Identity Store can also be used to securely store and retrieve other user identities or sensitive data that requires persistent and protected storage."]}),"\n",(0,r.jsx)(t.p,{children:"To save data in the IdentityStore, use the save method."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-kotlin",children:'encryptedStorage?.save("key", "value")\n'})}),"\n",(0,r.jsx)(t.p,{children:"To retrieve data from the IdentityStore, use the get method."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-kotlin",children:'val value = encryptedStorage?.get("key")\n'})}),"\n",(0,r.jsx)(t.p,{children:"To remove data from the IdentityStore, use the remove method."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-kotlin",children:'encryptedStorage?.remove("key")\n'})}),"\n",(0,r.jsx)(t.h2,{id:"removing-usage-of-the-identity-store-in-analytics-sdk",children:"Removing usage of the Identity Store in Analytics SDK"}),"\n",(0,r.jsx)(t.p,{children:"To remove the usage of the Identity Store in Analytics SDK, set the Identity Store to null."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-kotlin",children:" AnalyticsManager.setIdentityStorage(null)\n"})}),"\n",(0,r.jsxs)(t.admonition,{type:"info",children:[(0,r.jsx)(t.mdxAdmonitionTitle,{}),(0,r.jsxs)(t.p,{children:["Removing usage of the Identity Store in Analytics SDK results in the migration of previously saved member identifier to the default local store.  This default local store is ",(0,r.jsx)(t.strong,{children:"not"})," encrypted."]})]})]})}function y(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>d});var i=n(6540);const r={},s=i.createContext(r);function a(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);